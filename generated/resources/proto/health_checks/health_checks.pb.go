// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resources/proto/health_checks/health_checks.proto

package health_checks

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IsAliveOut_Status int32

const (
	IsAliveOut_OK     IsAliveOut_Status = 0
	IsAliveOut_NOT_OK IsAliveOut_Status = 2
)

var IsAliveOut_Status_name = map[int32]string{
	0: "OK",
	2: "NOT_OK",
}
var IsAliveOut_Status_value = map[string]int32{
	"OK":     0,
	"NOT_OK": 2,
}

func (x IsAliveOut_Status) String() string {
	return proto.EnumName(IsAliveOut_Status_name, int32(x))
}
func (IsAliveOut_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_health_checks_cdd3e5f8bb9328b8, []int{0, 0}
}

type IsAliveOut struct {
	Status               IsAliveOut_Status `protobuf:"varint,1,opt,name=status,proto3,enum=health_checks.IsAliveOut_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *IsAliveOut) Reset()         { *m = IsAliveOut{} }
func (m *IsAliveOut) String() string { return proto.CompactTextString(m) }
func (*IsAliveOut) ProtoMessage()    {}
func (*IsAliveOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_health_checks_cdd3e5f8bb9328b8, []int{0}
}
func (m *IsAliveOut) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsAliveOut.Unmarshal(m, b)
}
func (m *IsAliveOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsAliveOut.Marshal(b, m, deterministic)
}
func (dst *IsAliveOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsAliveOut.Merge(dst, src)
}
func (m *IsAliveOut) XXX_Size() int {
	return xxx_messageInfo_IsAliveOut.Size(m)
}
func (m *IsAliveOut) XXX_DiscardUnknown() {
	xxx_messageInfo_IsAliveOut.DiscardUnknown(m)
}

var xxx_messageInfo_IsAliveOut proto.InternalMessageInfo

func (m *IsAliveOut) GetStatus() IsAliveOut_Status {
	if m != nil {
		return m.Status
	}
	return IsAliveOut_OK
}

func init() {
	proto.RegisterType((*IsAliveOut)(nil), "health_checks.IsAliveOut")
	proto.RegisterEnum("health_checks.IsAliveOut_Status", IsAliveOut_Status_name, IsAliveOut_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HealthChecksClient is the client API for HealthChecks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HealthChecksClient interface {
	IsAlive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IsAliveOut, error)
}

type healthChecksClient struct {
	cc *grpc.ClientConn
}

func NewHealthChecksClient(cc *grpc.ClientConn) HealthChecksClient {
	return &healthChecksClient{cc}
}

func (c *healthChecksClient) IsAlive(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*IsAliveOut, error) {
	out := new(IsAliveOut)
	err := c.cc.Invoke(ctx, "/health_checks.HealthChecks/IsAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthChecksServer is the server API for HealthChecks service.
type HealthChecksServer interface {
	IsAlive(context.Context, *empty.Empty) (*IsAliveOut, error)
}

func RegisterHealthChecksServer(s *grpc.Server, srv HealthChecksServer) {
	s.RegisterService(&_HealthChecks_serviceDesc, srv)
}

func _HealthChecks_IsAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthChecksServer).IsAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/health_checks.HealthChecks/IsAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthChecksServer).IsAlive(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HealthChecks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "health_checks.HealthChecks",
	HandlerType: (*HealthChecksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAlive",
			Handler:    _HealthChecks_IsAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resources/proto/health_checks/health_checks.proto",
}

func init() {
	proto.RegisterFile("resources/proto/health_checks/health_checks.proto", fileDescriptor_health_checks_cdd3e5f8bb9328b8)
}

var fileDescriptor_health_checks_cdd3e5f8bb9328b8 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2c, 0x4a, 0x2d, 0xce,
	0x2f, 0x2d, 0x4a, 0x4e, 0x2d, 0xd6, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0xcf, 0x48, 0x4d, 0xcc,
	0x29, 0xc9, 0x88, 0x4f, 0xce, 0x48, 0x4d, 0xce, 0x2e, 0x46, 0xe5, 0xe9, 0x81, 0x55, 0x08, 0xf1,
	0xa2, 0x08, 0x4a, 0x49, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0x42, 0xb4, 0x27, 0x95, 0xa6, 0xe9,
	0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0xd4, 0x2a, 0xa5, 0x70, 0x71, 0x79, 0x16, 0x3b, 0xe6, 0x64,
	0x96, 0xa5, 0xfa, 0x97, 0x96, 0x08, 0x59, 0x70, 0xb1, 0x15, 0x97, 0x24, 0x96, 0x94, 0x16, 0x4b,
	0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x29, 0xe8, 0xa1, 0x9a, 0x8f, 0x50, 0xaa, 0x17, 0x0c, 0x56,
	0x17, 0x04, 0x55, 0xaf, 0x24, 0xc3, 0xc5, 0x06, 0x11, 0x11, 0x62, 0xe3, 0x62, 0xf2, 0xf7, 0x16,
	0x60, 0x10, 0xe2, 0xe2, 0x62, 0xf3, 0xf3, 0x0f, 0x89, 0xf7, 0xf7, 0x16, 0x60, 0x32, 0xf2, 0xe3,
	0xe2, 0xf1, 0x00, 0x1b, 0xe4, 0x0c, 0x36, 0x47, 0xc8, 0x8e, 0x8b, 0x1d, 0x6a, 0x94, 0x90, 0x98,
	0x1e, 0xc4, 0x79, 0x7a, 0x30, 0xe7, 0xe9, 0xb9, 0x82, 0x9c, 0x27, 0x25, 0x89, 0xd3, 0x6a, 0x25,
	0x86, 0x24, 0x36, 0xb0, 0x62, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba, 0xcb, 0x83, 0xe5,
	0x1d, 0x01, 0x00, 0x00,
}
